/*
 * Copyright 2022-2024 Google LLC
 * Copyright 2013-2021 CompilerWorks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.nio.file.Files
import java.util.stream.Collectors

plugins {
    id 'dwh-migration-dumper.java-library-conventions'
    alias libs.plugins.shadow
}

sourceSets {
    hive312 // build a runtime to run Hive 3.1.2 metastore/server
}

dependencies {
    api libs.libthrift
    implementation libs.guava
    implementation libs.jackson.databind
    compileOnly libs.javax.annotation.api

    hive312RuntimeOnly libs.hive.common
    hive312RuntimeOnly libs.hive.exec
    hive312RuntimeOnly libs.hive.service
    hive312RuntimeOnly libs.hive.metastore
    hive312RuntimeOnly libs.hive.jdbc
    // For HiveServer2
    hive312RuntimeOnly libs.tez.common
    hive312RuntimeOnly libs.tez.dag
    // Starting from version 1.8 the binding mechanics changed
    hive312RuntimeOnly("org.slf4j:slf4j-api") {
        version {
            strictly '1.7.13'
        }
    }
    // Hive has many dependencies on core through LogDivertAppender, use latest version
    hive312RuntimeOnly("org.apache.logging.log4j:log4j-core") {
        version {
            strictly '2.18.0'
        }
    }
}

dependencyLocking {
    lockAllConfigurations()
}

shadowJar {
    zip64 true
    configurations = [project.configurations.hive312RuntimeClasspath]

    exclude 'META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat' // or write a custom merger

    dependencies {
        exclude(dependency('org.slf4j:slf4j-log4j12'))
        exclude(dependency('log4j:log4j'))
        exclude(dependency('org.apache.logging.log4j:log4j-slf4j-impl'))
        exclude(dependency('org.datanucleus:.*')) // can't be safely shadowed
    }

    relocate 'org.apache.thrift', 'shadow.org.apache.thrift' // this is the whole point of doing this
    relocate 'com.google.common', 'shadow.com.google.common'
    relocate 'org.junit', 'shadow.org.junit'
    relocate 'com.facebook', 'shadow.com.facebook'
    relocate 'org.apache.commons.lang3', 'shadow.org.apache.commons.lang3'
    relocate 'com.fasterxml', 'shadow.com.fasterxml'

}

tasks.register("generateThrift") {
    def thriftFiles = Files.list(projectDir.toPath().resolve('src/main/thrift'))
        .filter { it.toString().endsWith('.thrift') }
        .collect(Collectors.toList())
    def outputPath = project.projectDir.toPath().resolve("src/main/gen-java")
    inputs.files(thriftFiles)
    outputs.dir(outputPath)

    doFirst {
        project.delete(outputPath)
        thriftFiles.each { thriftPath ->
            project.exec {
                workingDir project.projectDir.toPath().resolve('src/main')
                commandLine 'thrift', '-r', '--gen', 'java', thriftPath
            }
        }
    }
}

sourceSets.main.java {
    srcDir file('src/main/gen-java')
}
