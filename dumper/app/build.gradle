/*
 * Copyright 2022-2024 Google LLC
 * Copyright 2013-2021 CompilerWorks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    dependencies {
        classpath libs.gradle.license.report
    }
}

plugins {
    id 'dwh-migration-dumper.java-application-conventions'
    id 'jacoco'
}

apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: "jacoco"

configurations {
    sources {
        transitive = true
    }
}

dependencies {
    compileOnly libs.auto.value.annotations

    annotationProcessor libs.auto.value

    implementation project(':dumper:lib-common')
    implementation project(':dumper:lib-dumper-spi')
    implementation project(':dumper:lib-ext-bigquery')
    implementation project(':dumper:lib-ext-hive-metastore')

    implementation libs.guava
    implementation libs.jopt.simple
    implementation libs.jdiagnostics
    implementation libs.commons.io
    implementation libs.apache.avro
    implementation libs.apache.commons.csv
    implementation libs.apache.commons.lang3
    implementation libs.hadoop.common
    implementation libs.hadoop.hdfs.client
    implementation libs.spring.core
    implementation libs.spring.jdbc
    implementation libs.hikaricp
    implementation libs.rate.limited.logger
    implementation libs.jackson.databind
    implementation libs.jackson.dataformat.yaml
    implementation libs.jackson.datatype.guava
    implementation libs.google.cloud.bigquery
    implementation libs.google.cloud.nio
    implementation libs.google.cloud.kms
    implementation libs.httpclient5
    implementation libs.aws.java.sdk.redshift
    implementation libs.aws.java.sdk.cloudwatch

    runtimeOnly libs.logback.classic
    runtimeOnly libs.jcl.over.slf4j

    runtimeOnly libs.postgresql
    runtimeOnly libs.snowflake.jdbc
    runtimeOnly libs.redshift.jdbc

    runtimeOnly "ch.qos.reload4j:reload4j:1.2.26"
    runtimeOnly "org.slf4j:slf4j-reload4j:1.7.36"

    testFixturesApi testFixtures(project(':dumper:lib-common'))

    testImplementation libs.sqlite.jdbc
    testImplementation libs.postgresql
    testImplementation libs.system.rules
    testImplementation libs.joda.time
    testImplementation libs.mockito.core
    testImplementation libs.mockito.inline
    testImplementation libs.mockito.junit.jupiter
    testImplementation libs.wiremock


    // Test Hive 3.1.2
    testImplementation project(path: ':dumper:lib-ext-hive-metastore', configuration: 'shadow')
    // Excluded during shadowJar step, same versions as exclusions
    testRuntimeOnly libs.datanucleus.api.jdo
    testRuntimeOnly libs.datanucleus.core
    testRuntimeOnly libs.datanucleus.javax.jdo
    testRuntimeOnly libs.datanucleus.rdbms

    sources "org.slf4j:jcl-over-slf4j:${libs.versions.jcl.over.slf4j.get()}@sources"
    sources "ch.qos.logback:logback-classic:${libs.versions.logback.get()}@sources"
}

dependencyLocking {
    lockAllConfigurations()
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/dumper/application/**/AutoValue_*')
        }))
    }
}

startScripts {
    applicationName = "dwh-migration-dumper-starter"
    classpath = files('$APP_HOME/lib/*')
}

tasks.named('installDist') {
    dependsOn 'cloudExtractorStartScripts'
    dependsOn 'cloudExtractorStartScriptsForJava8'
}

application {
    // Define the main class for the application.
    mainClass = 'com.google.edwmigration.dumper.application.dumper.Main'
    applicationName = 'dwh-migration-dumper'
}

task cloudExtractorStartScriptsForJava8(type: CreateStartScripts) {
    outputDir = layout.buildDirectory.dir('install/cloud-extractor/bin').get().asFile
    classpath = tasks.startScripts.classpath
    mainClass = 'com.google.edwmigration.dumper.application.dumper.clouddumper.Main'
    applicationName = 'dwh-cloud-extractor'
}

task cloudExtractorStartScripts(type: CreateStartScripts) {
    outputDir = tasks.cloudExtractorStartScriptsForJava8.outputDir
    classpath = tasks.cloudExtractorStartScriptsForJava8.classpath
    mainClass = tasks.cloudExtractorStartScriptsForJava8.mainClass
    applicationName = 'dwh-cloud-extractor-java8'
    defaultJvmOpts = ["--add-opens=java.base/java.nio=ALL-UNNAMED"]
    dependsOn 'cloudExtractorStartScriptsForJava8'
}

licenseReport {
    // onlyIf { ! gradle.startParameter.offline }
    filters = [
        new com.github.jk1.license.filter.LicenseBundleNormalizer(bundlePath: rootProject.file("gradle/license-bundle-normalizer.json"), createDefaultTransformationRules: true)
    ]
    renderers = [
        new com.google.edwmigration.dumper.build.licensereport.CsvReportRenderer(),
        new com.github.jk1.license.render.JsonReportRenderer('index.json', false),
        new com.github.jk1.license.render.InventoryHtmlReportRenderer("index.html", "Licenses of Third Party Dependencies")
    ]
    allowedLicensesFile = rootProject.file("gradle/license-allowed.json")
}

tasks.named('check') {
    dependsOn 'checkLicense'
}

tasks.named('distTar') {
    dependsOn 'installDist'
}

tasks.named('distZip') {
    dependsOn 'installDist'
}

tasks.register('generateSourceMirror', Copy) {
    from {
        dependencies.createArtifactResolutionQuery()
            .forComponents(
                configurations.runtimeClasspath.incoming.resolutionResult
                    .allDependencies.collect { it.selected.id }
            )
            .withArtifacts(JvmLibrary, SourcesArtifact)
            .execute()
            .resolvedComponents
            .collectMany {
                it.artifactResults
                    .collect { it.file.path }
            }
    }
    into layout.buildDirectory.dir('mirror/sources')
    outputs.dir "mirror/sources"
}

tasks.register('copyGceLauncher', Copy) {
    from 'src/main/sh/cloud_extractor/gce_launcher.sh'
    into layout.buildDirectory.dir('cloud_extractor/launcher')
    filter(ReplaceTokens, tokens: [dumper_version: project.version])
    filteringCharset = 'UTF-8'
}

distributions {
    main {
        distributionBaseName = "app"
    }
    published {
        distributionBaseName = "dwh-migration-dumper"
        contents {
            from installDist
            from(cloudExtractorStartScripts) {
                into "bin"
            }
            from("src/main/sh/dwh-migration-dumper") {
                into "bin"
            }
            from("src/main/sh/dwh-migration-dumper.bat") {
                into "bin"
            }
            from(generateLicenseReport) {
                into "docs/licenses"
            }
            from(generateSourceMirror) {
                into "docs/sources"
            }
        }
    }
}

['publishedDistZip', 'publishedDistTar', 'installPublishedDist'].collect(tasks::named).each {
    it.configure { dependsOn('checkLicense') }
}
