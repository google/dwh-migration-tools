/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.google.edwmigration.dbsync.client;

import com.google.edwmigration.dbsync.proto.DbsyncTargetGrpc;
import com.jcraft.jsch.Session;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import java.io.File;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.List;
import javax.annotation.Nonnull;
import joptsimple.OptionSpec;
import joptsimple.util.InetAddressConverter;
import org.apache.commons.lang3.SystemUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientMain {

    private static final Logger LOG = LoggerFactory.getLogger(ClientMain.class);

    private static class Arguments extends DefaultArguments {

        private final OptionSpec<InetSocketAddress> remoteAddressOption =
            parser.accepts("remoteAddress", "Specifies the remote host address.")
                .withRequiredArg()
                .withValuesConvertedBy(new InetSocketAddressConverter(22))
                .required();

        private final OptionSpec<String> sshUser =
            parser.accepts("sshUser", "Specifies the ssh user.")
                .withRequiredArg()
                .defaultsTo(SystemUtils.USER_NAME);

        private final OptionSpec<File> sshIdentityOption =
            parser.accepts("sshIdentity", "Specifies the ssh identity private key file.")
                .withRequiredArg()
                .ofType(File.class)
                .defaultsTo(
                    new File(SystemUtils.USER_HOME, ".ssh/id_rsa"),
                    new File(SystemUtils.USER_HOME, ".ssh/id_dsa")
                );

        public Arguments(@Nonnull String[] args) {
            super(args);
        }

        public InetSocketAddress getRemoteAddress() {
            return getOptions().valueOf(remoteAddressOption);
        }

        public String getSshUser() {
            return getOptions().valueOf(sshUser);
        }

        public List<File> getSshIdentities() {
            return getOptions().valuesOf(sshIdentityOption);
        }
    }

    // gcloud --project=bigquerytestdefault compute ssh --zone=us-west1-b shevek@shevek-test-00 -- -o ProxyCommand='corp-ssh-helper %h %p' -L 2222:localhost:22
    public static void main(String[] args) throws Exception {
        Arguments arguments = new Arguments(args);
        arguments.getOptions();
        // ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 1234).build();
        // DbsyncTargetGrpc.DbsyncTargetStub stub = DbsyncTargetGrpc.newStub(channel);
        // stub.doFile(null, null);

        SshManager manager = new SshManager(arguments.getRemoteAddress(), arguments.getSshUser());
        for (File identity : arguments.getSshIdentities()) {
            if (identity.isFile()) {
                manager.addIdentity(identity);
            } else {
                LOG.warn("Not a regular file: {}", identity);
            }
        }
        Session session = manager.setup();
        LOG.info("Hello, world.");
        session.disconnect();
    }
}
