/*
 * Copyright 2022-2025 Google LLC
 * Copyright 2013-2021 CompilerWorks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.diffplug.gradle.spotless.FormatExtension
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import com.github.jk1.license.render.JsonReportRenderer
import com.google.edwmigration.dumper.build.licensereport.CsvReportRenderer


buildscript {
    dependencies {
        classpath libs.gradle.license.report
    }
}

plugins{
    id 'java'
    id 'com.diffplug.spotless'
    id 'application'
}

application {
    mainClass = 'com.google.edwmigration.dtsstatus.Main'
    applicationName = 'dwh-dts-transfer-status'
}

startScripts {
    classpath = files('$APP_HOME/lib/*')
}

jar {
    archiveBaseName = "dwh-dts-transfer-status"
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

apply plugin: 'com.github.jk1.dependency-license-report'

configurations {
    sources {
        transitive = true
    }
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation libs.jopt.simple
    implementation libs.google.cloud.bigquerydatatransfer
    implementation libs.slf4j.api
    implementation libs.jackson.databind
    implementation libs.google.cloud.logging
    implementation libs.ascii.table

    testImplementation libs.truth
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation libs.mockito.core
    testImplementation libs.mockito.inline


    runtimeOnly libs.logback.classic
}



test {
    useJUnitPlatform()
}


licenseReport {
    // onlyIf { ! gradle.startParameter.offline }
    filters = [
            new LicenseBundleNormalizer(bundlePath: rootProject.file("gradle/license-bundle-normalizer.json"), createDefaultTransformationRules: true)
    ]
    renderers = [
            new CsvReportRenderer(),
            new JsonReportRenderer('index.json', false),
            new InventoryHtmlReportRenderer("index.html", "Licenses of Third Party Dependencies")
    ]
    allowedLicensesFile = rootProject.file("gradle/license-allowed.json")
}

tasks.named('check') {
    dependsOn 'checkLicense'
}

tasks.register('generateSourceMirror', Copy) {
    from {
        dependencies.createArtifactResolutionQuery()
                .forComponents(
                        configurations.runtimeClasspath.incoming.resolutionResult
                                .allDependencies.collect { it.selected.id }
                )
                .withArtifacts(JvmLibrary, SourcesArtifact)
                .execute()
                .resolvedComponents
                .collectMany {
                    it.artifactResults
                            .collect { it.file.path }
                }
    }
    into layout.buildDirectory.dir('mirror/sources')
    outputs.dir "mirror/sources"
}

distributions {
    published {
        distributionBaseName = "dwh-dts-status"
        contents {
            duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
            from installDist
            from(generateLicenseReport) {
                into "docs/licenses"
            }
            from(generateSourceMirror) {
                into "docs/sources"
            }
        }
    }
}

['publishedDistZip', 'publishedDistTar', 'installPublishedDist'].collect(tasks::named).each {
    it.configure { dependsOn('checkLicense') }
}

spotless {

    java {
        googleJavaFormat()
        licenseHeaderFile rootProject.file("gradle/codequality/HEADER.java")
        trimTrailingWhitespace()
        FileCollection files = files()
        for (SourceSet sourceSet : sourceSets)
            files = files.plus(sourceSet.allJava)
        files = files.filter { f ->
            // println "Filtering " + f;
            String path = f.path
            // Ignore generated sources.
            if (path.contains('/build/'))
                return false
            if (path.contains('/gen-java/'))
                return false
            return true
        }
        target files
    }

    format('gradle', FormatExtension.class) {
        licenseHeaderFile rootProject.file("gradle/codequality/HEADER.java"), '(?i:[a-z])'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        target files('build.gradle')
    }
}

